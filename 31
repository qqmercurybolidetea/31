def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg18, arg19):
    var20 = func5()
    var24 = func6(arg19, var20)
    var25 = func10()
    var29 = func11(var24, arg18)
    var34 = func13(var25, var29)
    result = (var24 & ((var25 - (var29 & -83 | (((var25 | var20) - var20) | (var29 - var34)))) + (var29 ^ var24))) & var25
    return result
def func13(arg30, arg31):
    var32 = 0
    for var33 in range(1):
        var32 += (var33 + var32) & arg30
    return var32
def func10():
    func8()
    result = len(xrange(50))
    func9()
    return result
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : 0
def func5():
    func3()
    result = len(range(34))
    func4()
    return result
def func4():
    global len
    del len
def func3():
    global len
    len = lambda x : -4
def func1(arg1, arg2):
    var3 = arg2 & 664 + arg1 | arg2
    var4 = arg2 + (-1459548340 | arg1 & -2003870305)
    var5 = (var3 & arg2 | var3) & arg2
    var6 = var3 ^ var5 ^ var4
    var7 = var5 + -677
    var8 = var3 - var7 ^ (var5 + arg1)
    var9 = var7 | var4 | arg1
    var10 = var4 + arg2 + (arg2 - var8)
    var11 = var4 & (var9 + var9 ^ 1440270555)
    var12 = var3 | var3
    var13 = var10 & var3
    var14 = 612 + var3
    var15 = var5 & (-63669251 + var6 ^ var4)
    var16 = var14 + var6
    if var5 < var8:
        var17 = var10 ^ arg1
    else:
        var17 = 100015715 - var9 - var15 | var10
    result = var6 + var6
    return result
def func6(arg21, arg22):
    def func7(acc, rest):
        var23 = 2 & 7
        if acc == 0:
            return var23
        else:
            result = func7(acc - 1, var23)
            return result
    result = func7(10, 0)
    return result
def func11(arg26, arg27):
    closure = [0]
    def func12(acc, rest):
        var28 = closure[0] + -5 ^ ((-7 - closure[0]) + acc) + acc | acc
        closure[0] += var28
        if acc == 0:
            return var28
        else:
            result = func12(acc - 1, var28)
            return result
    result = func12(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 18'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 35'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,
